---
import { CollectionEntry, getCollection } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import BaseLayout from "./BaseLayout.astro";
import TableOfContent from "../components/TableOfContent.astro";
import ScrollToTopButton from "../components/ScrollToTopButton";
import { Image } from "astro:assets";
import SeriesList from "../components/SeriesList.astro";
import SeriesCard from "../components/SeriesCard.astro";
import ShareButton from "../components/ShareButton";

type Blog = CollectionEntry<"blog">["data"];

type Heading = {
  depth: number;
  slug: string;
  text: string;
};

export interface Props extends Blog {
  readingTime: string;
  headings: Heading[];
  url: string;
}

const {
  title,
  description,
  tags,
  pubDate,
  updatedDate,
  citations,
  cover,
  coverAlt,
  readingTime,
  headings,
  seriesId,
  orderInSeries,
  url,
} = Astro.props;

const series = (await getCollection("series")).find((s) => s.data.id === seriesId);
---

<BaseLayout {title} {description} {pubDate} {updatedDate} {url} {citations} {cover} isPost>
  <div
    class="prose prose-slate max-w-none prose-headings:scroll-my-20 prose-a:underline-offset-2 prose-a:decoration-blue-600 prose-img:rounded-lg dark:prose-invert post"
  >
    <h1 class="font-extrabold text-[clamp(2em,5vw,3em)]">{title}</h1>
    <div class="font-normal text-xs uppercase space-y-2">
      <div class="flex flex-wrap items-center space-x-3 text-black dark:text-white">
        <span>
          <FormattedDate date={pubDate} />
        </span>
        {
          updatedDate && (
            <>
              <span>{"•"}</span>
              <span>
                Atualizado em <FormattedDate date={updatedDate} />
              </span>
            </>
          )
        }
        <span>{"•"}</span>
        <span>{readingTime} DE LEITURA</span>
      </div>
      <div class="flex space-x-2 items-center">
        {
          tags.map((tag: unknown) => (
            <a
              href={`/tags/${tag}/`}
              class="no-underline bg-zinc-800 text-white dark:text-black dark:bg-zinc-300 hover:bg-zinc-950 dark:hover:bg-zinc-100 
              transition-colors duration-300 ease-in-out text-xs font-extrabold uppercase 
              p-1 px-4 rounded"
            >
              {tag}
            </a>
          ))
        }
      </div>
    </div>
    <div class="md:flex space-x-10">
      <div class="w-full">
        <div class="not-prose my-10">
          {series && <SeriesCard series={series} order={orderInSeries} />}
        </div>
        {
          headings.length > 0 && (
            <div id="table-of-content" class="flex flex-col justify-center items-center mt-9">
              <TableOfContent headings={headings} />
            </div>
          )
        }
        <article class="relative">
          <slot />
        </article>
        {
          citations && (
            <div class="citations">
              <h2>Referências:</h2>
              <ul class="list-none space-y-2 -translate-x-8">
                {citations.map((citation: any) => (
                  <li class="py-2">
                    <a href={citation.url} target="_blank" rel="noopener noreferrer" class="text-lg">
                      {citation.title}
                    </a><br>
                    {citation.author}
                  </li>
                ))}
              </ul>
            </div>
          )
        }
      </div>
    </div>
    <div class="flex sm:flex-col justify-between items-center fixed right-6 lg:right-28 bottom-16 bg-gradient-to-t from-zinc-950 from-10% to-zinc-800 text-white px-3 py-2 rounded-full text-xl sm:h-24">
      <span class="mt-1">
        <ShareButton
         client:idle
          url={url}
          title={title}
          description={description}
        />
      </span>
      <span class="hidden sm:block">
        <ScrollToTopButton client:idle/>
      </span>
    </div>
  </div>
</BaseLayout>

<script>
  const codeBlocks = Array.from(document.querySelectorAll("div[data-rehype-pretty-code-fragment]"));

  for (let codeBlock of codeBlocks) {
    const codeBlockPre = codeBlock.getElementsByTagName("pre")[0];

    // Copy button
    const copyButton = document.createElement("button");
    copyButton.className =
      "p-1 px-2 rounded-md text-zinc-300 text-xs bg-zinc-700 hover:bg-zinc-600 hover:text-slate-100";
    copyButton.innerHTML = "Copiar";

    // Header title
    const titleSpan = document.createElement("span");
    titleSpan.className = "text-blue-400";

    // Header div
    const headerDiv = document.createElement("div");
    headerDiv.className =
      "flex w-full bg-slate-950 border-b-[0.5px] border-blue-400 rounded-t-lg mt-10 text-base items-center justify-between py-2 px-4";

    // Current title
    const titleDiv = codeBlock.querySelector("div[data-rehype-pretty-code-title]");

    // Set title to the language name if no current title is set
    if (titleDiv) {
      const title = titleDiv.innerHTML;
      titleSpan.innerHTML = title;
      codeBlock.removeChild(titleDiv);
    } else {
      titleSpan.innerHTML = codeBlockPre.getAttribute("data-language") as string;
    }

    headerDiv.appendChild(titleSpan);
    headerDiv.appendChild(copyButton);
    codeBlock.prepend(headerDiv);

    copyButton.addEventListener("click", async () => {
      await copyCode(codeBlock, copyButton);
    });
  }

  async function copyCode(block: Element, button: HTMLButtonElement) {
    const code = block.querySelector("code") as HTMLElement;
    const text = code.innerText as string;
    await navigator.clipboard.writeText(text);
    button.innerText = "Copiado!";

    setTimeout(() => {
      button.innerText = "Copiar";
    }, 750);
  }
</script>

<script>
const h2Tags = document.querySelectorAll("h2");

h2Tags.forEach((h2Tag) => {
  // Crie uma nova div para cada tag <h2>
  const div = document.createElement("div");
  let nextElement = h2Tag.nextElementSibling;

  while (nextElement && nextElement.tagName !== "H2") {
    const sibling = nextElement;
    nextElement = nextElement.nextElementSibling;
    div.appendChild(sibling);
  }

  // Verifique se a div não está vazia e insira-a após a tag <h2>
  if (div.children.length > 0) {
    h2Tag.parentNode?.insertBefore(div, h2Tag.nextSibling);
  }
});

</script>

<style>
  @import url("https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;500;600;700;800&display=swap");

  .post {
    font-family: "Nunito", sans-serif;
    font-size: 1.125rem;
    line-height: 1.75rem;
    color: #4b5563;
  }
</style>
